-- New example script written by wally
-- You can suggest changes with a pull request or something
local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'Private Silent Aim V1',
    Center = true, 
    AutoShow = false,
})

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Silent Aim'),
    Visuals = Window:AddTab('Visuals'), 
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Silent Aim')
local RightGroupBox = Tabs.Main:AddRightGroupbox('FOV')
local TabBox = Tabs.Main:AddLeftTabbox('Yes')

-- Tabboxes are a tiny bit different, but here's a basic example:
--[[

local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side

local Tab1 = TabBox:AddTab('Tab 1')
local Tab2 = TabBox:AddTab('Tab 2')

-- You can now call AddToggle, etc on the tabs you added to the Tabbox
]]

-- Groupbox:AddToggle
-- Arguments: Index, Options


LeftGroupBox:AddToggle('SilentAim', {
    Text = 'Silent Aim',
    Default = true, -- Default value (true / false)
    Tooltip = '', -- Information shown when you hover over the toggle
})
Toggles.SilentAim:OnChanged(function()
    -- here we get our toggle object & then get its value
    getgenv().SilentAim = Toggles.SilentAim.Value
end)

-- This should print to the console: "My toggle state changed! New value: false"
Toggles.SilentAim:SetValue(true)        

LeftGroupBox:AddLabel('Silent Keybind'):AddKeyPicker('SilentAim',{ Default = 'E', NoUI = false, Text = 'Silent Aim' })

Options.SilentAim:OnClick(function()
  print('', Options.SilentAim.Value)
end)

-- Groupbox:AddButton
-- Arguments: Text, Callback



-- Button:AddButton
-- Arguments: Text, Callback
-- Adds a sub button to the side of the main button



-- Button:AddTooltip
-- Arguments: ToolTip



-- NOTE: You can chain the button methods!
--[[
    EXAMPLE: 

    LeftGroupBox:AddButton('Kill all', Functions.KillAll):AddTooltip('This will kill everyone in the game!')
        :AddButton('Kick all', Functions.KickAll):AddTooltip('This will kick everyone in the game!')
]]

-- Groupbox:AddLabel
-- Arguments: Text, DoesWrap


-- Groupbox:AddDivider
-- Arguments: None
LeftGroupBox:AddDivider()

-- Groupbox:AddSlider
-- Arguments: Idx, Options
LeftGroupBox:AddSlider('HitChance', {
    Text = 'Hit chance',
    Default = 100,
    Min = 0,
    Max = 100,
    Rounding = 0.5,

    Compact = false,
})
Options.HitChance:OnChanged(function()
    -- getgenv here once you make HC = Options.HitChance.Value
end)
-- Options is a table added to getgenv() by the library
-- You index Options with the specified index, in this case it is 'MySlider'
-- To get the value of the slider you do slider.Value

-- Groupbox:AddDropdown
-- Arguments: Idx, Info



RightGroupBox:AddToggle('FOVToggle', {
    Text = 'FOV',
    Default = true, -- Default value (true / false)
    Tooltip = 'Toggle the FOV', -- Information shown when you hover over the toggle
});

RightGroupBox:AddToggle('FOVFilled', {
    Text = 'FOV Filled',
    Default = false, -- Default value (true / false)
    Tooltip = 'Fill the FOV area', -- Information shown when you hover over the toggle
});

RightGroupBox:AddSlider('FOV', {
    Text = 'FOV Radius',

    Default = 20,
    Min = 0,
    Max = 500,
    Rounding = 0.5,

    Compact = false, -- If set to true, then it will hide the label
});

Options.FOV:SetValue(280)

LeftGroupBox:AddDropdown('MyDropdown', {
    Values = { 'Head', 'HumanoidRootPart', 'Torso', 'LeftArm', 'Right Arm' },
    Default = 5, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Hitpart',
    Tooltip = 'Hitbox Selection', -- Information shown when you hover over the textbox
})

Options.MyDropdown:OnChanged(function()
    print('Dropdown got changed. New value:', Options.MyDropdown.Value)
end)

Options.MyDropdown:SetValue('This')

-- Label:AddColorPicker
-- Arguments: Idx, Info

-- You can also ColorPicker & KeyPicker to a Toggle as well

-- OnClick is only fired when you press the keybind and the mode is Toggle
-- Otherwise, you will have to use Keybind:GetState()

task.spawn(function()
    while true do
        wait(1)

        if Library.Unloaded then break end
    end
end)

-- Library functions
-- Sets the watermark visibility
Library:SetWatermarkVisibility(false)

-- Sets the watermark text
Library:SetWatermark('')

Library.KeybindFrame.Visible = false; -- todo: add a function for this

Library:OnUnload(function()
    print('')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 


Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Silent Settings

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings() 

-- Adds our MenuKeybind to the ignore list 
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings']) 

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads!

    getgenv().Hitbox = {'Head','HumanoidRootPart','Torso','LeftArm','RightArm'}
    getgenv().SilentAim = true;
    getgenv().Hitchance = 0
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local mouse = LocalPlayer:GetMouse()
    local Camera = workspace.CurrentCamera
    local Debris = game:GetService("Debris")
    local UserInputService = game:GetService("UserInputService")
    local target = false
    local RunService = game:GetService("RunService")
        
    
    
    circle = Drawing.new("Circle")
    circle.Color = Color3.fromRGB(173,216,230)
    circle.NumSides = 300
    game:GetService("RunService").RenderStepped:Connect(function()
    circle.Radius = Options.FOV.Value
    circle.Visible = Toggles.FOVToggle.Value
    circle.Thickness = 1
    end)

    mouse.Move:Connect(function()
    circle.Position = Vector2.new(mouse.X, mouse.Y + 36)
    end)
    
    function getnearest()
    local nearestmagnitude = math.huge
    local nearestenemy = nil
    local vector = nil
    for i,v in next, Players:GetChildren() do
    if v ~= Players.LocalPlayer then
    if v.Character and  v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
    local vector, onScreen = Camera:WorldToScreenPoint(v.Character["Head"].Position)
    if onScreen then
    local ray = Ray.new(
    Camera.CFrame.p,
    (v.Character["Head"].Position-Camera.CFrame.p).unit*500
    )
    local ignore = {
    LocalPlayer.Character,
    }
    local hit,position,normal=workspace:FindPartOnRayWithIgnoreList(ray,ignore)
    if hit and hit:FindFirstAncestorOfClass("Model") and Players:FindFirstChild(hit:FindFirstAncestorOfClass("Model").Name)then
    local magnitude = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
    if magnitude < nearestmagnitude and magnitude <= Options.FOV.Value then
    nearestenemy = v
    nearestmagnitude = magnitude
    end
    end
    end
    end
    end
    end
    return nearestenemy
    end
    
    local meta = getrawmetatable(game)
    setreadonly(meta, false)
    local oldNamecall = meta.__namecall
    meta.__namecall = newcclosure(function(...)
    local method = getnamecallmethod()
    local args = {...}
    if string.find(method,'Ray') then
    if target then
    args[2] = Ray.new(workspace.CurrentCamera.CFrame.Position, (target + Vector3.new(0,(workspace.CurrentCamera.CFrame.Position-target).Magnitude/500,0) - workspace.CurrentCamera.CFrame.Position).unit * 500)
    end
    end
    return oldNamecall(unpack(args))
    end)

RunService:BindToRenderStep("SilentAim",1,function()
if UserInputService:IsMouseButtonPressed(0) and getgenv().SilentAim and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") and Players.LocalPlayer.Character.Humanoid.Health > 0 then
local enemy = getnearest()
if enemy and enemy.Character and enemy.Character:FindFirstChild("Humanoid") and enemy.Character.Humanoid.Health > 0 then                
local vector, onScreen = Camera:WorldToScreenPoint(enemy.Character["Head"].Position)
local magnitude = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude
target = workspace[enemy.Name]["Head"].Position
end
else
target = nil
end
end)
